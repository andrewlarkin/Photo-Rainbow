@using System.Text.RegularExpressions

@functions {

    public enum Size : int
    {
        Square    = 0,
        Thumbnail = 1,
        Small     = 2,
        Medium500 = 3,
        Medium640 = 4,
        Large     = 5,
        Original  = 6,
    } 

    private static dynamic SendRequestToFlickr(string url)
    {
        // Get Photo ID
        var photo_id = string.Empty;
        try
        {
            if (url.StartsWith("http://flic.kr"))
                photo_id = GetPhotoIdFromShortenedUrl(url);
            else
                photo_id = new Regex(@"\d{10}").Matches(url)[0].Value;
        }
        catch
        {
            throw new Exception("Invalid Url");
        }
        
        // Build Request
        if (string.IsNullOrEmpty(ApiKey))
            throw new Exception("API Key is not set.");

        var request = string.Format(
            "{0}?method={1}&api_key={2}&photo_id={3}&format={4}",
            "http://api.flickr.com/services/rest/",
            "flickr.photos.getInfo",
            ApiKey, photo_id, "json"
        );

        // Send Request
        var response = string.Empty;
        try
        {
            response = new WebClient().DownloadString(request);
        }
        catch (Exception e)
        {
            throw new Exception(e.Message);
        }

        // Parse
        try
        {
            response = new Regex(@"^jsonFlickrApi\((?<json>.+)\)$")
                .Matches(response)[0]
                .Groups["json"].Value;
        }
        catch
        {
            throw new Exception("Invalid Response");
        }

        return Json.Decode(response);
    }

    private static string GetExtension(Size size)
    {
        var table = new [] { "_s", "_t", "_m", "", "_z", "_b", "_o" };
        return table[(int)size];
    }

    private static string BuildPhotoUrl(dynamic info, Size? size = null)
    {
        size = size ?? DefauldSize;

        return string.Format(
            "http://farm{0}.static.flickr.com/{1}/{2}_{3}{4}.jpg",
            info.photo.farm,
            info.photo.server,
            info.photo.id,
            info.photo.secret,
            GetExtension((Size)size)
        );
    }

    private static string GetPhotoIdFromShortenedUrl(string url)
    {
        var photo_id = new Regex(@"http://flic.kr/p/([A-z0-9]+)")
            .Matches(url)[0].Groups[1].Value;

        return photo_id.Base58Decode().ToString();
    }

    static Flickr2Html()
    {
        ShowCaption = true;
        DefauldSize = Size.Medium500;
    }

    public static bool ShowCaption { get; set; }

    public static Size DefauldSize { get; set; }

    public static string ApiKey { get; set; }

    public static string FaviconUrl
    {
        get { return @"http://farm4.static.flickr.com/3329/favicons/72157601614001242_7730.png"; }
    }
}

@helper GetPhotoUrl(string url, Size? size = null)
{
    try
    { 
        dynamic info = SendRequestToFlickr(url);
        string src = BuildPhotoUrl(info, size);
        string title = info.photo.title._content;
        string user = info.photo.owner.username;

        <a href='@src'>@src</a>
    }
    catch (Exception e)
    {
        <span class="flickr-image-error">@url : @e.Message</span>
    }
}

@helper GetHtml(string url, Size? size = null, bool? show_caption = null)
{
    size = size ?? DefauldSize;
    show_caption = show_caption ?? ShowCaption;

    <blockquote class='flickr-image'>
    @try
    { 
        dynamic info = SendRequestToFlickr(url);
        string src = BuildPhotoUrl(info, size);
        string title = info.photo.title._content;
        string user = info.photo.owner.username;

        <a href='@url'><img src='@src' /></a>
        if(show_caption == true)
        {
        <p>
            <img src="@Flickr2Html.FaviconUrl" /> @title <span class="flickr-image-author">by
            <a href='http://www.flickr.com/photos/@user/'>@user</a></span>
        </p>
        }
    }
    catch (Exception e)
    {
        <p class="flickr-image-error">@url: @e.Message</p>
    }
    </blockquote>
}

@helper GetHtml5(string url, Size? size = null, bool? show_caption = null)
{
    size = size ?? DefauldSize;
    show_caption = show_caption ?? ShowCaption;

    <figure class='flickr-image'>
    @try
    { 
        dynamic info = SendRequestToFlickr(url);
        string src = BuildPhotoUrl(info, size);
        string title = info.photo.title._content;
        string user = info.photo.owner.username;

        <a href='@url'><img src='@src' /></a>
        if(show_caption == true)
        {
        <figcaption>
            <img src="@Flickr2Html.FaviconUrl" /> @title <span class="flickr-image-author">by
            <a href='http://www.flickr.com/photos/@user/'>@user</a></span>
        </figcaption>
        }
    }
    catch (Exception e)
    {
        <p class="flickr-image-error">@url: @e.Message</p>
    }
    </figure>
}

@helper IncludeStyleSheet()
{
    <link href="/Styles/Flickr2Html.css" rel="stylesheet" type="text/css" />
}
